x#!/usr/bin/env python3

import time
import argparse
import websockets
import telescope
import imqueue
import logging
import colorlog
from config import config

### Create command-line parser ###
parser = argparse.ArgumentParser(description='Interface and control an Atlas infrastructure')
subparsers = parser.add_subparsers(title='subcommands', dest='subparser')

### Create a sub parser to start components
server_parser = subparsers.add_parser('start', help="Start Atlas server components")
server_parser.add_argument('server', help='The Atlas server or module to start')

### Parse!
args = parser.parse_args()

########## FUNCTIONS ##########
def create_log():
    """ Create system logger for atlas messages.
    """
    # create format string for this module
    format_str = config.logging.fmt.replace('[name]', 'ATLAS')
    formatter = colorlog.ColoredFormatter(format_str, datefmt=config.logging.datefmt)

    # create stream
    stream = logging.StreamHandler()
    stream.setLevel(logging.DEBUG)
    stream.setFormatter(formatter)

    # assign log method and set handler
    log = logging.getLogger('atlas')
    log.setLevel(logging.DEBUG)
    log.addHandler(stream)

    return log
log = create_log()

    
########################################
#  ___  ___ _ ____   _____ _ __
# / __|/ _ \ '__\ \ / / _ \ '__|
# \__ \  __/ |   \ V /  __/ |
# |___/\___|_|    \_/ \___|_|
# server

if args.subparser == 'start':

    # start the telescope server
    if args.server == 'telescope':
        t = telescope.TelescopeServer()
    elif args.server == 'executor':
        e = imqueue.Executor()
    else:
        log.critical(f'Unknown server - {args.server}')
        
########################################    
