#!/usr/bin/env python3

import sys
import argparse
import signal
from os.path import dirname, realpath
import time
import subprocess
import yaml

import pipeline.server
# import logserver.server
import imqueue.server
import imqueue.executor

###################### OPEN CONFIG FILE ######################
# directory containing config.yaml
rootdir = dirname(realpath(__file__))
try:
    with open(rootdir+'/config.yaml', 'r') as config_file:
        try:
            config = yaml.safe_load(config_file)
            config['rootdir'] = rootdir
        except yaml.YAMLError as exception:
            print('Invalid YAML configuration file; '
                  'please check syntax.')
            print(str(exception)+' '+sys.exc_info())
            exit(-1)
except:
    print('seo unable to locate config.yaml; '
          'please make sure that it exists.')
    print(sys.exc_info())
    exit(-1)


########################## COMMAND LINE PARSER ########################
parser = argparse.ArgumentParser(prog='seo',
                                 description='Manage '+config['general']['name'])
arg_group = parser.add_mutually_exclusive_group()
arg_group.add_argument('--start-pipeline', '-p', action='store_true',
                    default=False, help='Start the pipeline server')
arg_group.add_argument('--start-queue', '-q', action='store_true',
                    default=False, help='Start the queue server')
arg_group.add_argument('--start-logserver', '-l', action='store_true',
                    default=False, help='Start the logging server')
arg_group.add_argument('--start-web', '-w', action='store_true',
                    default=False, help='Start the web application')
arg_group.add_argument('--start-executor', '-e', default=None,
                        help='Start the executor with a given file')
arg_group.add_argument('--version', action='version', version='%(prog)s 0.0.1')
parser.add_argument('--dry-run', '-d', action='store_true',
                    default=False, help='Print the executor commands but do not run them')

####################### PARSE COMMAND LINE ARGS ####################
ARGS = parser.parse_args()

# create logging function for easy colorized printing
def log(msg: str, color: str='white') -> bool:
    """ Prints a log message to STDOUT. Returns True if successful, False
    otherwise.
    """
    colors = {'red':'31', 'green':'32', 'blue':'34', 'cyan':'36',
              'white':'37', 'yellow':'33', 'magenta':'34'}
    logtime = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime())
    name = ' '+config['general']['shortname']+': '
    log = '\033[1;'+colors[color]+'m'+logtime+name+msg+'\033[0m'
    print(log)
    return True

############################ QUEUE SERVER ######################
if ARGS.start_queue is True:
    try:
        # create queue server
        imqueue = imqueue.server.QueueServer(config)
    except:
        log("Unable to start queue server", "red")
        print(sys.exc_info())

############################ EXECUTOR ######################
if ARGS.start_executor is not None:
    try:
        # create pipeline server
        executr = imqueue.executor.Executor(ARGS.start_executor, config, dryrun=ARGS.dry_run)
    except:
        log("Unable to start executor", "red")
        print(sys.exc_info())

        
############################ PIPELINE SERVER ######################
if ARGS.start_pipeline is True:
    try:
        # create pipeline server
        pipeline = pipeline.server.PipelineServer(config)
    except:
        log("Unable to start pipeline server", "red")
        print(sys.exc_info())

############################ LOGGING SERVER ######################
# if ARGS.start_logserver is True:
#     try:
#         # create pipeline server
#         logserver = logserver.server.LogServer(config)
#     except:
#         log("Unable to start log server", "red")
#         print(sys.exc_info())
