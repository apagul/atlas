#!/usr/bin/env python3

import sys
import argparse
import signal
from os.path import dirname, realpath
import time
import subprocess
import yaml

import pipeline.server
import logserver.server
import notify.server
import imqueue.server
import imqueue.executor

###################### OPEN CONFIG FILE ######################
# directory containing config.yaml
rootdir = dirname(realpath(__file__))
try:
    with open(rootdir+'/config.yaml', 'r') as config_file:
        try:
            config = yaml.safe_load(config_file)
            config['rootdir'] = rootdir
        except yaml.YAMLError as exception:
            print('Invalid YAML configuration file; '
                  'please check syntax.')
            print(str(exception)+' '+sys.exc_info())
            exit(-1)
except:
    print('seo unable to locate config.yaml; '
          'please make sure that it exists.')
    print(sys.exc_info())
    exit(-1)


########################## COMMAND LINE PARSER ########################
parser = argparse.ArgumentParser(prog='seo',
                                 description='Manage '+config['general']['name'])
arg_group = parser.add_mutually_exclusive_group()
arg_group.add_argument('--start-pipeline', '-p', action='store_true',
                    default=False, help='Start the pipeline server')
arg_group.add_argument('--start-queue', '-q', action='store_true',
                    default=False, help='Start the queue server')
arg_group.add_argument('--start-logserver', '-l', action='store_true',
                    default=False, help='Start the logging server')
arg_group.add_argument('--start-web', '-w', action='store_true',
                    default=False, help='Start the web application')
arg_group.add_argument('--start-notify', '-n', action='store_true',
                    default=False, help='Start the notification server')
arg_group.add_argument('--start-executor', '-e', action='store_true',
                    default=False, help='Start the queue executor')
arg_group.add_argument('--version', action='version', version='%(prog)s 0.0.1')
parser.add_argument('--dry-run', '-d', action='store_true',
                    default=False, help='Print the executor commands but do not run them')

####################### PARSE COMMAND LINE ARGS ####################
ARGS = parser.parse_args()

###################### START THE APPROPRIATE SERVICES #####################
if ARGS.start_queue is True:
    imqueue = imqueue.server.QueueServer(config)
if ARGS.start_executor is True:
    executr = imqueue.executor.Executor(config, dryrun=ARGS.dry_run)
if ARGS.start_pipeline is True:
    pipeline = pipeline.server.PipelineServer(config)
if ARGS.start_notify is True:
    notify = notify.server.NotificationServer(config)
if ARGS.start_logserver is True:
    log = logserver.server.LogServer(config)
